/*
 * MainFrame.java
 *
 * Created on 18.09.2011, 22:11:18
 */
package JavaO;
/**
 *
 * @author Nikita
 */


import java.io.IOException;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.Vector;
import java.util.Stack;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import javax.swing.JFormattedTextField;
import javax.swing.JSpinner;


public class MainFrame extends javax.swing.JFrame{

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        setResizable(false);

        Compiled = false;
        FileOpened = false;
        Running = false;
        Paused = false;
        Inputing = false;
        NegInt = false;
        StepForward = false;
        Stopped = false;
        Recompiled = false;
        
        setPauseEnabled(false);
        setRunEnabled(false);
        setStopEnabled(false);
        
        StepBackButton.setEnabled(false);
        StepForwardButton.setEnabled(false);
        
        InputTextField.setEnabled(false);

        OpenFileChooserFilter = new TextFileChooserFilter();
        
        aboutFrame = new AboutFrame();
        helpContentsFrame = new HelpContentsFrame();

        SaveAsFileChooser = new javax.swing.JFileChooser();
        SaveAsFileChooser.setDialogTitle("Source code file");
        SaveAsFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        OpenFileChooser.setFileFilter(OpenFileChooserFilter);

        ByteCodeTableModel = new javax.swing.table.DefaultTableModel(null, ByteCodeTableColumns){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        ByteCodeTable.setModel(ByteCodeTableModel);
        
        StackStatesTableModel = new javax.swing.table.DefaultTableModel(null, StackStatesTableColumns){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        StackStatesTable.setModel(StackStatesTableModel);
        
        VariablesTableModel = new javax.swing.table.DefaultTableModel(null, VariablesTableColumns){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        //VariablesTable.setModel(VariablesTableModel);
        
        ByteCodeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        StackStatesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        //VariablesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        StackStates = new Vector<FullStackState>();
        
        DelaySpinnerModel = new SpinnerNumberModel(1,1,5,1);
        DelaySpinner.setModel(DelaySpinnerModel);
        JFormattedTextField DelaySpinnerTextField = ((JSpinner.DefaultEditor) DelaySpinner.getEditor()).getTextField();
        DelaySpinnerTextField.setEditable(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OpenFileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        SourceCodeTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        ResultTextArea = new javax.swing.JTextArea();
        SourceCodeLabel = new javax.swing.JLabel();
        ResultLabel = new javax.swing.JLabel();
        CompileButton = new javax.swing.JButton();
        ByteCodeLabel = new javax.swing.JLabel();
        StackStatesLabel = new javax.swing.JLabel();
        RunPauseButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ByteCodeTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        StackStatesTable = new javax.swing.JTable();
        InputLabel = new javax.swing.JLabel();
        InputTextField = new javax.swing.JTextField();
        StepForwardButton = new javax.swing.JButton();
        StepBackButton = new javax.swing.JButton();
        DelayLabel = new javax.swing.JLabel();
        DelaySpinner = new javax.swing.JSpinner();
        PauseButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        FileMenuItem = new javax.swing.JMenu();
        MenuItemOpenFile = new javax.swing.JMenuItem();
        MenuItemSave = new javax.swing.JMenuItem();
        MenuItemSaveAs = new javax.swing.JMenuItem();
        MenuItemClose = new javax.swing.JMenuItem();
        MenuItemExit = new javax.swing.JMenuItem();
        RunMenu = new javax.swing.JMenu();
        CompileMenuItem = new javax.swing.JMenuItem();
        RunMenuItem = new javax.swing.JMenuItem();
        PauseMenuItem = new javax.swing.JMenuItem();
        StopMenuItem = new javax.swing.JMenuItem();
        MenuItemHelp = new javax.swing.JMenu();
        MenuItemHelpContents = new javax.swing.JMenuItem();
        MenuItemAbout = new javax.swing.JMenuItem();

        OpenFileChooser.setDialogTitle("Source code file");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("jOVMEmulator");

        SourceCodeTextArea.setColumns(20);
        SourceCodeTextArea.setRows(5);
        SourceCodeTextArea.setTabSize(4);
        jScrollPane1.setViewportView(SourceCodeTextArea);

        ResultTextArea.setColumns(20);
        ResultTextArea.setEditable(false);
        ResultTextArea.setRows(5);
        jScrollPane2.setViewportView(ResultTextArea);

        SourceCodeLabel.setText("Source code");

        ResultLabel.setText("Result");

        CompileButton.setText("Compile");
        CompileButton.setMaximumSize(new java.awt.Dimension(100, 30));
        CompileButton.setMinimumSize(new java.awt.Dimension(100, 30));
        CompileButton.setPreferredSize(new java.awt.Dimension(100, 30));
        CompileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompileButtonActionPerformed(evt);
            }
        });

        ByteCodeLabel.setText("OVM-code");

        StackStatesLabel.setText("Stack");

        RunPauseButton.setText("   Run   ");
        RunPauseButton.setMaximumSize(new java.awt.Dimension(100, 30));
        RunPauseButton.setMinimumSize(new java.awt.Dimension(100, 30));
        RunPauseButton.setPreferredSize(new java.awt.Dimension(100, 30));
        RunPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunPauseButtonActionPerformed(evt);
            }
        });

        ByteCodeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(ByteCodeTable);

        StackStatesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(StackStatesTable);

        InputLabel.setText("Input");

        InputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputTextFieldActionPerformed(evt);
            }
        });
        InputTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                InputTextFieldKeyTyped(evt);
            }
        });

        StepForwardButton.setText("Step Forward");
        StepForwardButton.setMaximumSize(new java.awt.Dimension(120, 30));
        StepForwardButton.setMinimumSize(new java.awt.Dimension(120, 30));
        StepForwardButton.setPreferredSize(new java.awt.Dimension(120, 30));
        StepForwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StepForwardButtonActionPerformed(evt);
            }
        });

        StepBackButton.setText("Step Back");
        StepBackButton.setMaximumSize(new java.awt.Dimension(120, 30));
        StepBackButton.setMinimumSize(new java.awt.Dimension(120, 30));
        StepBackButton.setPreferredSize(new java.awt.Dimension(120, 30));
        StepBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StepBackButtonActionPerformed(evt);
            }
        });

        DelayLabel.setText("Delay, sec");

        DelaySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DelaySpinnerStateChanged(evt);
            }
        });

        PauseButton.setText("Pause");
        PauseButton.setPreferredSize(new java.awt.Dimension(100, 30));
        PauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseButtonActionPerformed(evt);
            }
        });

        StopButton.setText("Stop");
        StopButton.setMaximumSize(new java.awt.Dimension(100, 30));
        StopButton.setMinimumSize(new java.awt.Dimension(100, 30));
        StopButton.setPreferredSize(new java.awt.Dimension(100, 30));
        StopButton.setRolloverEnabled(false);
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        FileMenuItem.setText("File");

        MenuItemOpenFile.setText("Open File ...");
        MenuItemOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenFileActionPerformed(evt);
            }
        });
        FileMenuItem.add(MenuItemOpenFile);

        MenuItemSave.setText("Save");
        MenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSaveActionPerformed(evt);
            }
        });
        FileMenuItem.add(MenuItemSave);

        MenuItemSaveAs.setText("Save as ...");
        MenuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSaveAsActionPerformed(evt);
            }
        });
        FileMenuItem.add(MenuItemSaveAs);

        MenuItemClose.setText("Close and clear");
        MenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCloseActionPerformed(evt);
            }
        });
        FileMenuItem.add(MenuItemClose);

        MenuItemExit.setText("Exit");
        MenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemExitActionPerformed(evt);
            }
        });
        FileMenuItem.add(MenuItemExit);

        MenuBar.add(FileMenuItem);

        RunMenu.setText("Run");

        CompileMenuItem.setText("Compile");
        CompileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompileMenuItemActionPerformed(evt);
            }
        });
        RunMenu.add(CompileMenuItem);

        RunMenuItem.setText("Run");
        RunMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunMenuItemActionPerformed(evt);
            }
        });
        RunMenu.add(RunMenuItem);

        PauseMenuItem.setText("Pause");
        PauseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseMenuItemActionPerformed(evt);
            }
        });
        RunMenu.add(PauseMenuItem);

        StopMenuItem.setText("Stop");
        StopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopMenuItemActionPerformed(evt);
            }
        });
        RunMenu.add(StopMenuItem);

        MenuBar.add(RunMenu);

        MenuItemHelp.setText("Help");

        MenuItemHelpContents.setText("Help Contents");
        MenuItemHelpContents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemHelpContentsActionPerformed(evt);
            }
        });
        MenuItemHelp.add(MenuItemHelpContents);

        MenuItemAbout.setText("About");
        MenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAboutActionPerformed(evt);
            }
        });
        MenuItemHelp.add(MenuItemAbout);

        MenuBar.add(MenuItemHelp);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SourceCodeLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ResultLabel)
                        .addGap(261, 261, 261))
                    .addComponent(InputLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(InputTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(CompileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DelayLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DelaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RunPauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(44, 44, 44)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ByteCodeLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(StopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(StepForwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(StepBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StackStatesLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CompileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DelayLabel)
                    .addComponent(DelaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RunPauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StopButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StepBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StepForwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SourceCodeLabel)
                    .addComponent(ByteCodeLabel)
                    .addComponent(StackStatesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(InputLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(ResultLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void clearTextAreas(){
        ResultTextArea.setText("");
        InputTextField.setText("");
        ByteCodeTable.setModel(new javax.swing.table.DefaultTableModel(null, ByteCodeTableColumns));
        StackStatesTable.setModel(new javax.swing.table.DefaultTableModel(null, StackStatesTableColumns));
    }
    
    private void CompileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompileButtonActionPerformed
        clearTextAreas();
        ErrorMessage.clearMessage();
        Text.SourceCode = SourceCodeTextArea.getText().getBytes();
        if(Text.SourceCode.length == 0){
            ResultTextArea.setText("Source code is empty!");
        }
        else{
            try{
                JavaO.compile();
                ResultTextArea.setText("\nCompilation complete.\n");
                ByteCodeTableModel.setDataVector(Syntax.getByteCode(), new Vector(Arrays.asList(ByteCodeTableColumns)));
                ByteCodeTable.setModel(ByteCodeTableModel);
                Compiled = true;
                Paused = false;
                
                Inputing = false;
                NegInt = false;
                
                setRunEnabled(true);
                StepForward = false;
                StepBack = 0;
                StepForwardButton.setEnabled(true);
                StepBackButton.setEnabled(false);
                StackStateNumber = /*-1*/0;
                BackForwardStack = new Stack<FullStackState>();
                ResultTextArea.setText(ErrorMessage.getMessage());
            }
            catch(Exception e){
                clearTextAreas();
                ResultTextArea.setText(ErrorMessage.getMessage());
                Compiled = false;
            }
        }
    }//GEN-LAST:event_CompileButtonActionPerformed

    private void RunActionPerformed(/*java.awt.event.ActionEvent evt*/){
        ResultTextArea.setText("");
        try{    
            Vm = new VM(CodeGen.getMemory(), Syntax.getVariables(), this);
            Vm.execute();
        }
        catch(Exception e){
            ResultTextArea.setText("Exception: \n"+e.getMessage());
        }
    }

    public int getDelay(){
        return ((Integer)DelaySpinner.getValue()).intValue();
    }
    
    public boolean getStepForward(){
        return StepForward;
    }
    
    public void setFullStackState(FullStackState FStackState){
        ByteCodeTable.setRowSelectionInterval(FStackState.PC, FStackState.PC);
        StackStatesTableModel.setDataVector(FStackState.State, StackStatesTableColumnHeaders);
        StackStatesTable.setModel(StackStatesTableModel);
        setResult(FStackState.Result);
    }
    
    public void selectByteCode(int PC){
        ByteCodeTable.setRowSelectionInterval(PC, PC);
    }
    
    public void setStackState(Vector StackState){
        StackStatesTableModel.setDataVector(StackState, StackStatesTableColumnHeaders);
        StackStatesTable.setModel(StackStatesTableModel);
    }
    
    public void setStackStateNumber(int StackStateNumber){
        this.StackStateNumber = StackStateNumber;
    }
    
    public void setStackStates(Vector<FullStackState> StackStates){
        this.StackStates = StackStates;
    }
    
    public void clearStackStates(){
        this.StackStates.clear();
    }
    
//    public void setVariables(Vector Variables){
//        VariablesTableModel.setDataVector(Variables, VariablesTableColumnHeaders);
//        VariablesTable.setModel(VariablesTableModel);
//    }
    
    public void setResult(String Result){
        ResultTextArea.setText(Result);
    }
    
    public void setRunning(boolean Running){
        this.Running = Running;
    }
    
    public boolean getRunning(){
        return this.Running;
    }
    
    public void setStopped(boolean Stopped){
        this.Stopped = Stopped;
    }
    
    public void setStepForward(boolean StepForward){
        this.StepForward = StepForward;
    }
    
    public void setRunEnabled(boolean isEnabled){
        RunPauseButton.setEnabled(isEnabled);
        RunMenuItem.setEnabled(isEnabled);
    }
    
    public void setPauseEnabled(boolean isEnabled){
        PauseButton.setEnabled(isEnabled);
        PauseMenuItem.setEnabled(isEnabled);
    }
    
    public void setCompileEnabled(boolean isEnabled){
        CompileButton.setEnabled(isEnabled);
        CompileMenuItem.setEnabled(isEnabled);
    }
    
    public void setStopEnabled(boolean isEnabled){
        StopButton.setEnabled(isEnabled);
        StopMenuItem.setEnabled(isEnabled);
    }
    
    public void setStepForwardEnabled(boolean isEnabled){
        StepForwardButton.setEnabled(isEnabled);
    }
    
    public void setStepBackEnabled(boolean isEnabled){
        StepBackButton.setEnabled(isEnabled);
    }
    
    public void setInputTextFieldEnabled(boolean isEnabled){
        InputTextField.setEnabled(isEnabled);
    }
    
    private void Run() {    
        if(Compiled){
            setPauseEnabled(true);
            setCompileEnabled(false);
            setRunEnabled(false);
            setStopEnabled(false);
            StepBackButton.setEnabled(false);
            StepForwardButton.setEnabled(false);
            setStepForward(false);
            IntMaxLength = 10;
            if( !Running && !Paused ){
                Running = true;
                RunActionPerformed();
            }
            else if(Paused){
                synchronized(Vm.PuaseMonitor){
                    Running = true;
                    Paused = false;
                    Vm.PuaseMonitor.notifyAll();
                }
            }
        }
        else{
            ResultTextArea.setText("Source code wasn't compiled!");
        }
    }
    
    
    private void MenuItemOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenFileActionPerformed
        ResultTextArea.setText("");
        int returnVal = OpenFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = OpenFileChooser.getSelectedFile();
            try {
                SourceCodeTextArea.read( new FileReader( file.getAbsolutePath() ), null );
            }
            catch(IOException e) {
                //System.out.println("problem accessing file "+file.getAbsolutePath());
                ResultTextArea.setText("problem accessing file "+file.getAbsolutePath() + "\n" + e.getMessage());
            }
        }
        else{
            //System.out.println("File access cancelled by user.");
            ResultTextArea.setText("File access cancelled by user.");
        }
        FileOpened = true;
    }//GEN-LAST:event_MenuItemOpenFileActionPerformed

    private void MenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemExitActionPerformed
        //dispose();
        System.exit(0);
    }//GEN-LAST:event_MenuItemExitActionPerformed

    private void CompileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompileMenuItemActionPerformed
        CompileButtonActionPerformed(evt);
    }//GEN-LAST:event_CompileMenuItemActionPerformed

    private void RunMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunMenuItemActionPerformed
        Run();
    }//GEN-LAST:event_RunMenuItemActionPerformed

    private void MenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAboutActionPerformed
        aboutFrame.setVisible(true);
    }//GEN-LAST:event_MenuItemAboutActionPerformed

    private void MenuItemHelpContentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemHelpContentsActionPerformed
        helpContentsFrame.setVisible(true);
    }//GEN-LAST:event_MenuItemHelpContentsActionPerformed

    private void MenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSaveActionPerformed
        ResultTextArea.setText("");
        if(FileOpened){
            try{
                fileWriter = new FileWriter(file);
                fileWriter.write(SourceCodeTextArea.getText());
                fileWriter.close();
            }
            catch(IOException e){
                //System.err.println("Error: "+e.getMessage());
                ResultTextArea.setText("problem saving file "+file.getAbsolutePath() + "\n" + e.getMessage());
            }
        }
        else{
            MenuItemSaveAsActionPerformed(evt);
        }
    }//GEN-LAST:event_MenuItemSaveActionPerformed

    private void MenuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSaveAsActionPerformed
        ResultTextArea.setText("");
        int returnVal = SaveAsFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String SaveAsFileName = SaveAsFileChooser.getSelectedFile().getName();
            try{
                file = new File(SaveAsFileName);
                if(!file.exists()){
                    file.createNewFile();
                }
                fileWriter = new FileWriter(file);
                fileWriter.write(SourceCodeTextArea.getText());
                fileWriter.close();
            }
            catch(IOException e){
                //System.err.println("Error: "+e.getMessage());
                ResultTextArea.setText("problem saving file "+file.getAbsolutePath() + "\n" + e.getMessage());
            }
        }
        else{
             ResultTextArea.setText("File access cancelled by user.");
        }
    }//GEN-LAST:event_MenuItemSaveAsActionPerformed

    private void MenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCloseActionPerformed
        ResultTextArea.setText("");
        SourceCodeTextArea.setText("");
        if(FileOpened){
            FileOpened = false;
        }
    }//GEN-LAST:event_MenuItemCloseActionPerformed

    private void RunPauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunPauseButtonActionPerformed
        Run();
    }//GEN-LAST:event_RunPauseButtonActionPerformed

    private void InputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputTextFieldActionPerformed
        String InputNumberStr = InputTextField.getText();
        if(InputNumberStr.length() != 0 && 
                !(InputNumberStr.length() == 1 && InputNumberStr.charAt(0) == '-')){
            
            if(Long.valueOf(InputNumberStr) > Integer.MAX_VALUE){
                ResultTextArea.append("\n" + "Entered number is too big, max value is " + 
                                        Integer.MAX_VALUE + ". Try again.");
            }
            else if(Long.valueOf(InputNumberStr) < Integer.MIN_VALUE){
                ResultTextArea.append("\n" + "Entered number is too small, min value is " + 
                                        Integer.MIN_VALUE + ". Try again.");
            }
            else{
                synchronized(Vm.InputMonitor){
                    Inputing = false;
                    InputNumberInt = Integer.valueOf(InputNumberStr).intValue();
                    Vm.InputMonitor.notifyAll();
                }
                
                InputTextField.setEnabled(false);
                
                //setPauseEnabled(true);
                
//                if()
//                setRunEnabled(false);
//                setStopEnabled(false);
//                setStepBackEnabled(false);
//                setStepForwardEnabled(false);
//                else
            
            }
        }
        else {
            ResultTextArea.append("\n" + "Entered number is empty. Try again.");
        }
        NegInt = false;
        IntMaxLength = 10;
        InputTextField.setText("");
    }//GEN-LAST:event_InputTextFieldActionPerformed

    
    public int getInputNumber(){
        return InputNumberInt;
    }

    private void InputTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputTextFieldKeyTyped
        char a = evt.getKeyChar();

        //System.out.println(InputTextField.getText().length() + "   " + IntMaxLength);
        
        if(a == '-' && InputTextField.getText().length() == 0 ){
            NegInt = true;
            IntMaxLength++;
        }
        else if(!Character.isDigit(a) || InputTextField.getText().length() > IntMaxLength-1){
            evt.consume();
        }
        //System.out.println(IntMaxLength);
    }//GEN-LAST:event_InputTextFieldKeyTyped

    private void DelaySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_DelaySpinnerStateChanged

    }//GEN-LAST:event_DelaySpinnerStateChanged

    private void PauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseButtonActionPerformed
        synchronized(Vm.PuaseMonitor){
            Paused = true;
            Running = false;
        }
        setRunEnabled(true);
        setPauseEnabled(false);
        setStopEnabled(true);
        setCompileEnabled(false);
        if(StackStateNumber > 0){
            StepBackButton.setEnabled(true);
        }
        StepForwardButton.setEnabled(true);
    }//GEN-LAST:event_PauseButtonActionPerformed

    private void StepForwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StepForwardButtonActionPerformed
        setCompileEnabled(false);
        if(StepBack == 0){
            if( !Running && !Paused ){
                setStepForward(true);
                RunActionPerformed();
            }
            else if(Paused){
                synchronized(Vm.PuaseMonitor){
                    Running = true;// - ?
                    Paused = false;// - ?
                    Vm.PuaseMonitor.notifyAll();
                }
                setStepForward(true);
            }
        }
        else/*if(StepBack > 0)*/{
            StackStateNumber++;
            setFullStackState(BackForwardStack.pop());           
            StepBack--;
            
            if(StepBack > 0){
                setRunEnabled(false);
                setPauseEnabled(false);
            }
            else/*if(StepBack == 0)*/{
                setRunEnabled(true);
            }
        }

        try{
            Thread.sleep(100);
        }
        catch(InterruptedException e){
            //запись в лог
        }
        
        
        if(StackStateNumber > 0){
            StepBackButton.setEnabled(true);
        }
        else{
            StepBackButton.setEnabled(false);
        }
        
        StopButton.setEnabled(true);
        
        try{
            Thread.sleep(500);
        }
        catch(InterruptedException e){
        
        }
    }//GEN-LAST:event_StepForwardButtonActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        //synchronized(Vm.monitor){
            if(Vm != null && !Vm.isDone()){
                Vm.cancel(true);
                Vm = null;
            }
            Paused = false;
            Stopped = true;
        //}
        StackStateNumber = 0;
        StepForward = false;

        StepBack = 0;
        StepBackButton.setEnabled(false);
        StepForwardButton.setEnabled(true);
        setPauseEnabled(false);
        setStopEnabled(false);
        setCompileEnabled(true);
        try{
            Thread.sleep(1000);
        }
        catch(InterruptedException e){
        
        }
        setRunEnabled(true);
    }//GEN-LAST:event_StopButtonActionPerformed

    private void PauseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseMenuItemActionPerformed
        PauseButtonActionPerformed(evt);
    }//GEN-LAST:event_PauseMenuItemActionPerformed

    private void StopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopMenuItemActionPerformed
        StopButtonActionPerformed(evt);
    }//GEN-LAST:event_StopMenuItemActionPerformed

    private void StepBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StepBackButtonActionPerformed
        try{
            Thread.sleep(500);
        }
        catch(InterruptedException e){
            //запись в лог
        }
        StepBack++;
        StackStateNumber--;
        
        setFullStackState(StackStates.elementAt(StackStateNumber));
        BackForwardStack.push(StackStates.elementAt(StackStateNumber+1));
            
        if(StackStateNumber == 0){
            StepBackButton.setEnabled(false);
        }
        
        if(StepBack > 0){
            setRunEnabled(false);
            setPauseEnabled(false);
        }
        StopButton.setEnabled(true);
    }//GEN-LAST:event_StepBackButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    private int InputNumberInt;
    private int IntMaxLength = 10;
    
    private boolean Compiled;
    private boolean Recompiled;
    private boolean FileOpened;
    private boolean Running;
    private boolean Stopped;
    public boolean StepForward;
    public int StepBack;
    boolean Paused;
    boolean Inputing;
    private boolean NegInt;
    
    private AboutFrame aboutFrame;
    private HelpContentsFrame helpContentsFrame;
    private TextFileChooserFilter OpenFileChooserFilter;
    File file;
    FileWriter fileWriter;
    private SpinnerNumberModel DelaySpinnerModel;
    
    javax.swing.table.DefaultTableModel ByteCodeTableModel;
    javax.swing.table.DefaultTableModel StackStatesTableModel;
    javax.swing.table.DefaultTableModel VariablesTableModel;
    javax.swing.DefaultListSelectionModel selectionModel;
    javax.swing.table.DefaultTableColumnModel columnModel;
    
    javax.swing.table.TableColumn NumberColumn;
    javax.swing.table.TableColumn CodeColumn;
    javax.swing.table.TableColumn DescColumn;
    
    private Vector<FullStackState> StackStates;
    private Stack<FullStackState> BackForwardStack;
    
    final String ByteCodeTableColumns[] = {"Address", "Code", "Description"};
    final String StackStatesTableColumns[] = {"Operands", "Command"};
    final String VariablesTableColumns[] = {"Address", "Name", "Value"};
    final Vector StackStatesTableColumnHeaders = new Vector(Arrays.asList(StackStatesTableColumns));
    final Vector VariablesTableColumnHeaders = new Vector(Arrays.asList(VariablesTableColumns));
    
    private int ByteCodeTableRowsCounter = 0;
    private int StackStateNumber;
    
    private javax.swing.JFileChooser SaveAsFileChooser;
    
    private VM Vm;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ByteCodeLabel;
    private javax.swing.JTable ByteCodeTable;
    private javax.swing.JButton CompileButton;
    private javax.swing.JMenuItem CompileMenuItem;
    private javax.swing.JLabel DelayLabel;
    private javax.swing.JSpinner DelaySpinner;
    private javax.swing.JMenu FileMenuItem;
    private javax.swing.JLabel InputLabel;
    private javax.swing.JTextField InputTextField;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem MenuItemAbout;
    private javax.swing.JMenuItem MenuItemClose;
    private javax.swing.JMenuItem MenuItemExit;
    private javax.swing.JMenu MenuItemHelp;
    private javax.swing.JMenuItem MenuItemHelpContents;
    private javax.swing.JMenuItem MenuItemOpenFile;
    private javax.swing.JMenuItem MenuItemSave;
    private javax.swing.JMenuItem MenuItemSaveAs;
    private javax.swing.JFileChooser OpenFileChooser;
    private javax.swing.JButton PauseButton;
    private javax.swing.JMenuItem PauseMenuItem;
    private javax.swing.JLabel ResultLabel;
    private javax.swing.JTextArea ResultTextArea;
    private javax.swing.JMenu RunMenu;
    private javax.swing.JMenuItem RunMenuItem;
    private javax.swing.JButton RunPauseButton;
    private javax.swing.JLabel SourceCodeLabel;
    private javax.swing.JTextArea SourceCodeTextArea;
    private javax.swing.JLabel StackStatesLabel;
    private javax.swing.JTable StackStatesTable;
    private javax.swing.JButton StepBackButton;
    private javax.swing.JButton StepForwardButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JMenuItem StopMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
