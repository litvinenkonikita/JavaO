/*
 * MainFrame.java
 *
 * Created on 18.09.2011, 22:11:18
 */
package JavaO;
/**
 *
 * @author Nikita
 */


import java.io.IOException;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.util.Arrays;
import java.util.Vector;
import javax.swing.JFileChooser;



public class MainFrame extends javax.swing.JFrame implements java.awt.event.ActionListener{

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        setResizable(false);

        Compiled = false;
        FileOpened = false;

        OpenFileChooserFilter = new TextFileChooserFilter();
        //SaveAsFileChooserFilter = new TextFileChooserFilter();
        
        aboutFrame = new AboutFrame();
        helpContentsFrame = new HelpContentsFrame();

        SaveAsFileChooser = new javax.swing.JFileChooser();
        SaveAsFileChooser.setDialogTitle("Source code file");
        SaveAsFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        OpenFileChooser.setFileFilter(OpenFileChooserFilter);

        ByteCodeTableModel = new javax.swing.table.DefaultTableModel(null, ByteCodeTableColumns){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        ByteCodeTable.setModel(ByteCodeTableModel);
        
        StackStatesTableModel = new javax.swing.table.DefaultTableModel(null, StackStatesTableColumns){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        StackStatesTable.setModel(StackStatesTableModel);
        
        ByteCodeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        StackStatesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        StackStates = new Vector<Vector>();
        ByteCodeTableTimer = new javax.swing.Timer(500, this);
        
        //Vm = new VM(CodeGen.getMemory(), Syntax.getVariables());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OpenFileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        SourceCodeTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        ResultTextArea = new javax.swing.JTextArea();
        SourceCodeLabel = new javax.swing.JLabel();
        ResultLabel = new javax.swing.JLabel();
        CompileButton = new javax.swing.JButton();
        ByteCodeLabel = new javax.swing.JLabel();
        StackStatesLabel = new javax.swing.JLabel();
        RunPauseButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ByteCodeTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        StackStatesTable = new javax.swing.JTable();
        InputLabel = new javax.swing.JLabel();
        InputTextField = new javax.swing.JTextField();
        MenuBar = new javax.swing.JMenuBar();
        FileMenuItem = new javax.swing.JMenu();
        MenuItemOpenFile = new javax.swing.JMenuItem();
        MenuItemSave = new javax.swing.JMenuItem();
        MenuItemSaveAs = new javax.swing.JMenuItem();
        MenuItemClose = new javax.swing.JMenuItem();
        MenuItemExit = new javax.swing.JMenuItem();
        RunMenu = new javax.swing.JMenu();
        MenuItemCompile = new javax.swing.JMenuItem();
        MenuItemRun = new javax.swing.JMenuItem();
        MenuItemHelp = new javax.swing.JMenu();
        MenuItemHelpContents = new javax.swing.JMenuItem();
        MenuItemAbout = new javax.swing.JMenuItem();

        OpenFileChooser.setDialogTitle("Source code file");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JavaO");

        SourceCodeTextArea.setColumns(20);
        SourceCodeTextArea.setRows(5);
        jScrollPane1.setViewportView(SourceCodeTextArea);

        ResultTextArea.setColumns(20);
        ResultTextArea.setEditable(false);
        ResultTextArea.setRows(5);
        jScrollPane2.setViewportView(ResultTextArea);

        SourceCodeLabel.setText("Source code");

        ResultLabel.setText("Result");

        CompileButton.setText("Compile");
        CompileButton.setMaximumSize(new java.awt.Dimension(100, 30));
        CompileButton.setMinimumSize(new java.awt.Dimension(100, 30));
        CompileButton.setPreferredSize(new java.awt.Dimension(100, 30));
        CompileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompileButtonActionPerformed(evt);
            }
        });

        ByteCodeLabel.setText("Byte-code");

        StackStatesLabel.setText("Stack states");

        RunPauseButton.setText("   Run   ");
        RunPauseButton.setMaximumSize(new java.awt.Dimension(100, 30));
        RunPauseButton.setMinimumSize(new java.awt.Dimension(100, 30));
        RunPauseButton.setPreferredSize(new java.awt.Dimension(100, 30));
        RunPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunPauseButtonActionPerformed(evt);
            }
        });

        ByteCodeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(ByteCodeTable);

        StackStatesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(StackStatesTable);

        InputLabel.setText("Input");

        FileMenuItem.setText("File");

        MenuItemOpenFile.setText("Open File ...");
        MenuItemOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenFileActionPerformed(evt);
            }
        });
        FileMenuItem.add(MenuItemOpenFile);

        MenuItemSave.setText("Save");
        MenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSaveActionPerformed(evt);
            }
        });
        FileMenuItem.add(MenuItemSave);

        MenuItemSaveAs.setText("Save as ...");
        MenuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemSaveAsActionPerformed(evt);
            }
        });
        FileMenuItem.add(MenuItemSaveAs);

        MenuItemClose.setText("Close and clear");
        MenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCloseActionPerformed(evt);
            }
        });
        FileMenuItem.add(MenuItemClose);

        MenuItemExit.setText("Exit");
        MenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemExitActionPerformed(evt);
            }
        });
        FileMenuItem.add(MenuItemExit);

        MenuBar.add(FileMenuItem);

        RunMenu.setText("Run");

        MenuItemCompile.setText("Compile");
        MenuItemCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCompileActionPerformed(evt);
            }
        });
        RunMenu.add(MenuItemCompile);

        MenuItemRun.setText("Run / Pause");
        MenuItemRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemRunActionPerformed(evt);
            }
        });
        RunMenu.add(MenuItemRun);

        MenuBar.add(RunMenu);

        MenuItemHelp.setText("Help");

        MenuItemHelpContents.setText("Help Contents");
        MenuItemHelpContents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemHelpContentsActionPerformed(evt);
            }
        });
        MenuItemHelp.add(MenuItemHelpContents);

        MenuItemAbout.setText("About");
        MenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAboutActionPerformed(evt);
            }
        });
        MenuItemHelp.add(MenuItemAbout);

        MenuBar.add(MenuItemHelp);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SourceCodeLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ResultLabel)
                        .addGap(261, 261, 261))
                    .addComponent(InputLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(InputTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CompileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(RunPauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(44, 44, 44)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ByteCodeLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StackStatesLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CompileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RunPauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SourceCodeLabel)
                    .addComponent(ByteCodeLabel)
                    .addComponent(StackStatesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(InputLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(ResultLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void clearTextAreas(){
        ResultTextArea.setText("");
        ByteCodeTable.setModel(new javax.swing.table.DefaultTableModel(null, ByteCodeTableColumns));
        StackStatesTable.setModel(new javax.swing.table.DefaultTableModel(null, StackStatesTableColumns));
    }
    
    private void CompileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompileButtonActionPerformed
        clearTextAreas();
        
        Text.SourceCode = SourceCodeTextArea.getText().getBytes();
        try{
            JavaO.compile();
            Vm = new VM(CodeGen.getMemory(), Syntax.getVariables());
            ////ResultTextArea.setText(VM.getResult());
            ResultTextArea.setText("\nCompilation complete.\n");
            ////ByteCodeTableModel.setDataVector(VM.getByteCode(), new Vector(Arrays.asList(ByteCodeTableColumns)));
            ByteCodeTableModel.setDataVector(Vm.getByteCode(), new Vector(Arrays.asList(ByteCodeTableColumns)));
            ByteCodeTable.setModel(ByteCodeTableModel);
            Compiled = true;
        }
        catch(Exception e){
            clearTextAreas();
            ResultTextArea.setText(ErrorMessage.getMessage());
            Compiled = false;
        }
    }//GEN-LAST:event_CompileButtonActionPerformed

    private void RunActionPerformed(/*java.awt.event.ActionEvent evt*/){
        ResultTextArea.setText("");
        try{    
            if(Compiled){
                ////JavaO.run();
////                VM.run();
////                StackStates = VM.getStackStates();
                Vm.run();
                StackStates = Vm.getStackStates();
////                ResultTextArea.setText(VM.getResult());
                ResultTextArea.setText(Vm.getResult());
                ByteCodeTableTimer.start();
            }
            else{
                ResultTextArea.setText("Source code wasn't compiled!");
            }
        }
        catch(Exception e){
            //System.err.println(e.getMessage());
            ResultTextArea.setText("Exception: \n"+e.getMessage());
        }
    }
    
    @Override
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        //ByteCodeTable.setRowSelectionInterval(ByteCodeTableRowsCounter-1, ByteCodeTableRowsCounter);
        // Проверять - если ByteCodeTableRowsCounter не соответствует текущей выбранной строке, то
        //System.out.println(ByteCodeTableRowsCounter+" "+ByteCodeTable.getRowCount());
        if(ByteCodeTableRowsCounter < ByteCodeTable.getRowCount()-1){
            ByteCodeTable.setRowSelectionInterval(ByteCodeTableRowsCounter, ByteCodeTableRowsCounter);
            setStackState(StackStates.get(ByteCodeTableRowsCounter));
            ByteCodeTableRowsCounter++;
        }
        else if(ByteCodeTableRowsCounter == ByteCodeTable.getRowCount()-1){
            ByteCodeTable.setRowSelectionInterval(ByteCodeTableRowsCounter, ByteCodeTableRowsCounter);
            ByteCodeTableRowsCounter++;
        }
        else{
            ByteCodeTableTimer.stop();
            ByteCodeTableRowsCounter = 0;
        }
    }
    
//    private void StackStateChangeActionPerformed(java.awt.event.ActionEvent evt){
//        StackStatesTableModel.setDataVector(VM.getStackState(), new Vector(Arrays.asList(StackStatesTableColumns)));
//        StackStatesTable.setModel(StackStatesTableModel);
//    }
    
    public void setStackState(Vector StackState){
        StackStatesTableModel.setDataVector(StackState, StackStatesTableColumnHeaders);
        StackStatesTable.setModel(StackStatesTableModel);
    }
    
    private void Run() {                                            
        if(!Running){
            RunPauseButton.setText("Pause");
            Running = true;
            RunActionPerformed();
        }
        else{
            RunPauseButton.setText("Run");
            Running = false;
            ByteCodeTableTimer.stop();
        }
    }         
    
    
    private void MenuItemOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenFileActionPerformed
        ResultTextArea.setText("");
        int returnVal = OpenFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = OpenFileChooser.getSelectedFile();
            try {
                SourceCodeTextArea.read( new FileReader( file.getAbsolutePath() ), null );
            }
            catch(IOException e) {
                //System.out.println("problem accessing file "+file.getAbsolutePath());
                ResultTextArea.setText("problem accessing file "+file.getAbsolutePath() + "\n" + e.getMessage());
            }
        }
        else{
            //System.out.println("File access cancelled by user.");
            ResultTextArea.setText("File access cancelled by user.");
        }
        FileOpened = true;
    }//GEN-LAST:event_MenuItemOpenFileActionPerformed

    private void MenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemExitActionPerformed
        //dispose();
        System.exit(0);
    }//GEN-LAST:event_MenuItemExitActionPerformed

    private void MenuItemCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCompileActionPerformed
        CompileButtonActionPerformed(evt);
    }//GEN-LAST:event_MenuItemCompileActionPerformed

    private void MenuItemRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemRunActionPerformed
        Run();
    }//GEN-LAST:event_MenuItemRunActionPerformed

    private void MenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAboutActionPerformed
        aboutFrame.setVisible(true);
    }//GEN-LAST:event_MenuItemAboutActionPerformed

    private void MenuItemHelpContentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemHelpContentsActionPerformed
        helpContentsFrame.setVisible(true);
    }//GEN-LAST:event_MenuItemHelpContentsActionPerformed

    private void MenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSaveActionPerformed
        ResultTextArea.setText("");
        if(FileOpened){
            try{
                fileWriter = new FileWriter(file);
                fileWriter.write(SourceCodeTextArea.getText());
                fileWriter.close();
            }
            catch(IOException e){
                //System.err.println("Error: "+e.getMessage());
                ResultTextArea.setText("problem saving file "+file.getAbsolutePath() + "\n" + e.getMessage());
            }
        }
        else{
            MenuItemSaveAsActionPerformed(evt);
        }
    }//GEN-LAST:event_MenuItemSaveActionPerformed

    private void MenuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemSaveAsActionPerformed
        ResultTextArea.setText("");
        int returnVal = SaveAsFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String SaveAsFileName = SaveAsFileChooser.getSelectedFile().getName();
            try{
                file = new File(SaveAsFileName);
                if(!file.exists()){
                    file.createNewFile();
                }
                fileWriter = new FileWriter(file);
                fileWriter.write(SourceCodeTextArea.getText());
                fileWriter.close();
            }
            catch(IOException e){
                //System.err.println("Error: "+e.getMessage());
                ResultTextArea.setText("problem saving file "+file.getAbsolutePath() + "\n" + e.getMessage());
            }
        }
        else{
             ResultTextArea.setText("File access cancelled by user.");
        }
    }//GEN-LAST:event_MenuItemSaveAsActionPerformed

    private void MenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCloseActionPerformed
        ResultTextArea.setText("");
        SourceCodeTextArea.setText("");
        if(FileOpened){
            FileOpened = false;
            //SourceCodeTextArea.setText("");
        }
    }//GEN-LAST:event_MenuItemCloseActionPerformed

    private void RunPauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunPauseButtonActionPerformed
        Run();
    }//GEN-LAST:event_RunPauseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    
    private boolean Compiled;
    private boolean FileOpened;
    private boolean Running = false;
    private AboutFrame aboutFrame;
    private HelpContentsFrame helpContentsFrame;
    private TextFileChooserFilter OpenFileChooserFilter;
    private TextFileChooserFilter SaveAsFileChooserFilter;
    File file;
    FileWriter fileWriter;
    //BufferedWriter bufferedWriter;
    
    javax.swing.table.DefaultTableModel ByteCodeTableModel;
    javax.swing.table.DefaultTableModel StackStatesTableModel;
    javax.swing.DefaultListSelectionModel selectionModel;
    javax.swing.table.DefaultTableColumnModel columnModel;
    
    javax.swing.table.TableColumn NumberColumn;
    javax.swing.table.TableColumn CodeColumn;
    javax.swing.table.TableColumn DescColumn;
    
    private Vector<Vector> StackStates;
    
    final String ByteCodeTableColumns[] = {"Address", "Code", "Description"};
    final String StackStatesTableColumns[] = {"Operands", "Command"};
    final Vector StackStatesTableColumnHeaders = new Vector(Arrays.asList(StackStatesTableColumns));
    
    private int ByteCodeTableRowsCounter = 0;
    private javax.swing.Timer ByteCodeTableTimer;
    
    private javax.swing.JFileChooser SaveAsFileChooser;
    
    private VM Vm;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ByteCodeLabel;
    private javax.swing.JTable ByteCodeTable;
    private javax.swing.JButton CompileButton;
    private javax.swing.JMenu FileMenuItem;
    private javax.swing.JLabel InputLabel;
    private javax.swing.JTextField InputTextField;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem MenuItemAbout;
    private javax.swing.JMenuItem MenuItemClose;
    private javax.swing.JMenuItem MenuItemCompile;
    private javax.swing.JMenuItem MenuItemExit;
    private javax.swing.JMenu MenuItemHelp;
    private javax.swing.JMenuItem MenuItemHelpContents;
    private javax.swing.JMenuItem MenuItemOpenFile;
    private javax.swing.JMenuItem MenuItemRun;
    private javax.swing.JMenuItem MenuItemSave;
    private javax.swing.JMenuItem MenuItemSaveAs;
    private javax.swing.JFileChooser OpenFileChooser;
    private javax.swing.JLabel ResultLabel;
    private javax.swing.JTextArea ResultTextArea;
    private javax.swing.JMenu RunMenu;
    private javax.swing.JButton RunPauseButton;
    private javax.swing.JLabel SourceCodeLabel;
    private javax.swing.JTextArea SourceCodeTextArea;
    private javax.swing.JLabel StackStatesLabel;
    private javax.swing.JTable StackStatesTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
